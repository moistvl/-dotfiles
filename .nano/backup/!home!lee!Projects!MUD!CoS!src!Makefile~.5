# $Id $

# Makefile for Rom24. Works fine on my Debian system.
# You may need to use 'gmake' on BSD systems.

#CC = gcc
#RM = rm
#EXE = cos
#PROF = -O -ggdb
#NOCRYPT = -DNOCRYPT
#SRC = *.c
#INC = *.h

# Use these two lines to use crypt(), ie on Linux systems.
# C_FLAGS = $(PROF) -Wall
# L_FLAGS = $(PROF) -lcrypt

# Uncomment these two lines to use plaintext passwords.
# This is how you fix the 'crypt' linking errors!
#C_FLAGS = -Wall -Wstrict-prototypes -DOLD_RAND $(PROF) $(NOCRYPT) -DQMFIXES
#L_FLAGS = $(PROF)

CC	= gcc
PROF	= -O -ggdb
NOCRYPT = -DNOCRYPT
C_FLAGS = -Wall -Wstrict-prototypes -DOLD_RAND $(PROF) $(NOCRYPT)
L_FLAGS = $(PROF)
EXE	= cos
.PHONY: clean build all

SRC = *.c
INC = *.h
all:: build cos

checkin:
	ci -l $(SRC) $(INC)
	mv *.c,v *.h,v /home/lee/public_html/RCS

diff:
	rcsdiff -c $(SRC) $(INC) > cos.diff
build:
      	@if [ -f .build ]; then \
            expr `cat .build` + 1 > .build; \
        else \
            echo '1' > .build; \
        fi
	@if [ -f .version ]; then \
            expr `cat .version` + 1 > .version; \
        else \
            echo '10001' > .version; \
        fi
	@if [ `cat .build` -ge 51 ]; then \
            echo '1' > .build; \
        fi
	@echo '#ifndef BUILD_H' > build.h
        @echo '#define BUILD_H' >> build.h
        @echo "#define LINKCOUNT   `cat .build`" >> build.h
        @echo '#endif' >> build.h
        @echo '#ifndef VERSION_H' > version.h
        @echo '#define VERSION_H' >> version.h
        @echo "#define VERSION   `cat .version`" >> version.h
        @echo '#endif' >> version.h
        @echo "Build number `cat .build`, version `cat .version` set."

# Source Files
SRC_FILES := $(wildcard *.c)

# Object Files
OBJ_DIR = obj
OBJ_FILES := $(patsubst %.c,$(OBJ_DIR)/%.o,$(SRC_FILES))

cos: $(OBJ_FILES)
	$(RM) -f $(EXE)
	$(CC) $(L_FLAGS) -o $(EXE) $(OBJ_FILES)

$(OBJ_DIR)/%.o: %.c
	$(CC) $(C_FLAGS) -c -o $@ $<

clean:
	$(RM) -f $(OBJ_FILES) $(EXE) *~ *.bak *.orig *.rej

